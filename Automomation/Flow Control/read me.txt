**FLOW CONTROL**
In a flowchart, there is usually more than one way to go from the start
to the end. The same is true for lines of code in a computer program. Flowcharts
represent these branching points with diamonds, while the other
steps are represented with rectangles. The starting and ending steps are
represented with rounded rectangles.

**Boolean Operation**
Boolean data type has only two values: True
and False. (Boolean is capitalized because the data type is named after
mathematician George Boole.) When typed as Python code, the Boolean
values True and False lack the quotes you place around strings, and they
always start with a capital T or F, with the rest of the word in lowercase

**Comparison Operators**
Operator                             Meaning
==                                   Equal to
!=                                   Not equal to
<                                    Less than
>                                    Greater than
<=                                   Less than or equal to
>=                                   Greater than or equal to

**The Difference Between the == and = Operators**
You might have noticed that the == operator (equal to) has two equal signs,
while the = operator (assignment) has just one equal sign. It’s easy to confuse
these two operators with each other. Just remember these points:
• The == operator (equal to) asks whether two values are the same as each
other.
• The = operator (assignment) puts the value on the right into the variable
on the left.
To help remember which is which, notice that the == operator (equal to)
consists of two characters, just like the != operator (not equal to) consists of
two characters.

**Boolean Operators**
The three Boolean operators (and, or, and not) are used to compare Boolean
values. Like comparison operators, they evaluate these expressions down
to a Boolean value. Let’s explore these operators in detail, starting with the
and operator.

**Flow Control Statements**

if Statements
The most common type of flow control statement is the if statement. An if
statement’s clause (that is, the block following the if statement) will execute
if the statement’s condition is True. The clause is skipped if the condition is
False.
In plain English, an if statement could be read as, “If this condition is
true, execute the code in the clause.” In Python, an if statement consists of
the following:

• The if keyword
• A condition (that is, an expression that evaluates to True or False)
• A colon
• Starting on the next line, an indented block of code (called the if clause)

else Statements
An if clause can optionally be followed by an else statement. The else clause
is executed only when the if statement’s condition is False. In plain English,
an else statement could be read as, “If this condition is true, execute this
code. Or else, execute that code.” An else statement doesn’t have a condition,
and in code, an else statement always consists of the following:
• The else keyword
• A colon
• Starting on the next line, an indented block of code (called the else clause)

elif Statements
While only one of the if or else clauses will execute, you may have a case
where you want one of many possible clauses to execute. The elif statement
is an “else if” statement that always follows an if or another elif statement.
It provides another condition that is checked only if any of the previous conditions
were False. In code, an elif statement always consists of the following:
• The elif keyword
• A condition (that is, an expression that evaluates to True or False)
• A colon
• Starting on the next line, an indented block of code (called the elif
clause)

while Loop Statements
You can make a block of code execute over and over again with a while statement.
The code in a while clause will be executed as long as the while statement’s
condition is True. In code, a while statement always consists of the
following:
• The while keyword
• A condition (that is, an expression that evaluates to True or False)
• A colon
• Starting on the next line, an indented block of code (called the while clause)

break Statements
There is a shortcut to getting the program execution to break out of a while
loop’s clause early. If the execution reaches a break statement, it immediately
exits the while loop’s clause. In code, a break statement simply contains
the break keyword.

continue Statements
Like break statements, continue statements are used inside loops. When the
program execution reaches a continue statement, the program execution
immediately jumps back to the start of the loop and reevaluates the loop’s
condition. (This is also what happens when the execution reaches the end of the loop.)

for Loops and the range() Function
The while loop keeps looping while its condition is True (which is the reason
for its name), but what if you want to execute a block of code only a certain
number of times? You can do this with a for loop statement and the range()
function.

In code, a for statement looks something like for i in range(5): and
always includes the following:
• The for keyword
• A variable name
• The in keyword
• A call to the range() method with up to three integers passed to it
• A colon
• Starting on the next line, an indented block of code (called the for clause)

**The Starting, Stopping, and Stepping Arguments to range()**
The range() function can also be called with three arguments. The first
two arguments will be the start and stop values, and the third will be the
step argument. The step is the amount that the variable is increased by after
each iteration.

The range() function is flexible in the sequence of numbers it produces
for for loops. For example (I never apologize for my puns), you can even use
a negative number for the step argument to make the for loop count down
instead of up.

**Importing Modules**

All Python programs can call a basic set of functions called built-in functions,
including the print(), input(), and len() functions you’ve seen before. Python
also comes with a set of modules called the standard library. Each module
is a Python program that contains a related group of functions that can be
embedded in your programs. For example, the math module has mathematics related
functions, the random module has random number–related functions,
and so on.
Before you can use the functions in a module, you must import the
module with an import statement. In code, an import statement consists of
the following:
• The import keyword
• The name of the module
• Optionally, more module names, as long as they are separated by commas.

Once you import a module, you can use all the cool functions of that module.

**from import Statements**
An alternative form of the import statement is composed of the from keyword,
followed by the module name, the import keyword, and a star; for
example,
from random import *.
With this form of import statement, calls to functions in random will not
need the random. prefix. However, using the full name makes for more readable
code, so it is better to use the normal form of the import statement

**Ending a Program Early with sys.exit()**
The last flow control concept to cover is how to terminate the program.
This always happens if the program execution reaches the bottom of the
instructions. However, you can cause the program to terminate, or exit, by
calling the sys.exit() function. Since this function is in the sys module, you
have to import sys before your program can use it.
