**MANIPULATING STRING**
*String Literals*
Typing string values in Python code is fairly straightforward: They begin and end with a single quote.

*Double Quotes*
Strings can begin and end with double quotes, just as they do with single quotes. One benefit of using double
quotes is that the string can have a single quote character in it.

Since the string begins with a double quote, Python knows that the single quote is part of the string and not marking
the end of the string. However, if you need to use both single quotes and double quotes in the string, you’ll need to
use escape characters.

*Escape Characters*
Escape character                            Prints as
\'                                          Single quote
\"                                          Double quote
\t                                          Tab
\n                                          Newline (line break)
\\                                          Backslash

*Raw Strings*
You can place an r before the beginning quotation mark of a string to make it a raw string. A raw string completely
ignores all escape characters and prints any backslash that appears in the string.

**Multiple strings with triple quotes*
While you can use the \n escape character to put a newline into a string, it is often easier to use multiline strings.
A multiline string in Python begins and ends with either three single quotes or three double quotes. Any quotes,tabs,
or newlines in between the “triple quotes” are considered part of the string. Python’s indentation rules for blocks do
not apply to lines inside a multiline string.

*Multiline Comments*
While the hash character (#) marks the beginning of a comment for the rest of the line, a multiline string is often used
for comments that span multiple lines.

*Indexing and Slicing Strings*
Strings use indexes and slices the same way lists do. You can think of the string 'Hello world!' as a list and each
character in the string as an item with a corresponding index.

*The in and not in Operators with Strings*
The in and not in operators can be used with strings just like with list values. An expression with two strings joined
using in or not in will evaluate to a Boolean True or False.

*The join() and split() String Methods*
The join() method is useful when you have a list of strings that need to be joined together into a single string value.
The join() method is called on a string, gets passed a list of strings, and returns a string. The returned string is the
concatenation of each string in the passed-in list.

*Read python documentation for other string methods*
Removing Whitespace with strip(), rstrip(), and lstrip()

*copying and pasting strings with pyperclip module*